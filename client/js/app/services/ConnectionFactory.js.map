{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","closeConnection","Error","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","event","_createStores","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACnC,MAAMC,SAAS,CAAC,cAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,mBAAkB,IAAtB;;AAEA;AACE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAKyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAMC,cAAcC,UAAUC,IAAV,CAAeT,MAAf,EAAuBD,OAAvB,CAApB;;AAEAQ,sBAAYG,eAAZ,GAA8B,UAACC,KAAD,EAAW;AACvCd,8BAAkBe,aAAlB,CAAgCD,MAAME,MAAN,CAAaC,MAA7C;AACD,WAFD;;AAIAP,sBAAYQ,SAAZ,GAAwB,UAACJ,KAAD,EAAW;AACjC,gBAAI,CAACV,UAAL,EAAiB;AACfA,2BAAaU,MAAME,MAAN,CAAaC,MAA1B;AACA;AACAZ,iCAAkBD,WAAWe,KAAX,CAAiBC,IAAjB,CAAsBhB,UAAtB,CAAlB;AACA;AACAA,yBAAWe,KAAX,GAAmB,YAAY;AAC7B,sBAAM,IAAIb,KAAJ,CAAU,gCAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AACD,WAXD;;AAaAM,sBAAYW,OAAZ,GAAsB,UAACP,KAAD,EAAW;AAC/BQ,oBAAQC,GAAR,CAAYT,MAAME,MAAN,CAAaQ,KAAzB;AACAf,mBAAOK,MAAME,MAAN,CAAaQ,KAAb,CAAmBC,IAA1B;AACD,WAHD;AAID,SAxBM,CAAP;AAyBD;AA/BH;AAAA;AAAA,oCAiCuBrB,UAjCvB,EAiCmC;AAC/BH,eAAOyB,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,cAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC/CvB,uBAAW0B,iBAAX,CAA6BH,KAA7B;AACD;;AAEDvB,qBAAW2B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAClCK,2BAAe;AADmB,WAApC;AAGD,SARD;AASD;AA3CH;AAAA;AAAA,wCA6C2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACAD,uBAAa,IAAb;AACD;AACF;AAlDH;;AAAA;AAAA;AAoDD,CA5DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n  const stores = [\"negotiations\"];\n  const version = 3;\n  const dbName = \"aluraframe\";\n\n  var connection = null;\n  var closeConnection = null;\n\n  return class ConnectionFactory {\n    constructor() {\n      throw new Error(\"class is not instanciable\");\n    }\n\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        const openRequest = indexedDB.open(dbName, version);\n\n        openRequest.onupgradeneeded = (event) => {\n          ConnectionFactory._createStores(event.target.result);\n        };\n\n        openRequest.onsuccess = (event) => {\n          if (!connection) {\n            connection = event.target.result;\n            //salvando a referência antes de sobrescrever a função close utilizando bind para manter o contexto global connection\n            closeConnection = connection.close.bind(connection);\n            //sobrescrevendo a função close da connection por uma nova função para impedir o fechamento da conexão pelo desenvolvedor\n            connection.close = function () {\n              throw new Error(\"Você não pode fechar a conexão\");\n            };\n          }\n          resolve(connection);\n        };\n\n        openRequest.onerror = (event) => {\n          console.log(event.target.error);\n          reject(event.target.error.name);\n        };\n      });\n    }\n\n    static _createStores(connection) {\n      stores.forEach((store) => {\n        if (connection.objectStoreNames.contains(store)) {\n          connection.deleteObjectStore(store);\n        }\n\n        connection.createObjectStore(store, {\n          autoIncrement: true,\n        });\n      });\n    }\n\n    static closeConnection() {\n      if (connection) {\n        closeConnection();\n        connection = null;\n      }\n    }\n  };\n})();\n"]}