{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","model","props","action","Proxy","get","target","prop","reciever","includes","_isFunction","Reflect","apply","arguments","set","value","result","fn","Function"],"mappings":";;;;;;;;IAAMA,Y;;;;;;;2BACUC,K,EAAOC,K,EAAOC,M,EAAQ;;AAElC,aAAO,IAAIC,KAAJ,CAAUH,KAAV,EAAiB;AAEtBI,WAFsB,eAElBC,MAFkB,EAEVC,IAFU,EAEJC,QAFI,EAEM;;AAE1B,cAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,WAAb,CAAyBJ,OAAOC,IAAP,CAAzB,CAA5B,EAAoE;AAClE,mBAAO,YAAY;AACjB;AACAI,sBAAQC,KAAR,CAAcN,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCO,SAApC,EAFiB,CAE+B;AAChD,qBAAOV,OAAOG,MAAP,CAAP;AACD,aAJD;AAKD;;AAED,iBAAOK,QAAQN,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP,CAV0B,CAUkB;AAC7C,SAbqB;AAetBM,WAfsB,eAelBR,MAfkB,EAeVC,IAfU,EAeJQ,KAfI,EAeGP,QAfH,EAea;AACjC,cAAMQ,SAASL,QAAQG,GAAR,CAAYR,MAAZ,EAAoBC,IAApB,EAA0BQ,KAA1B,EAAiCP,QAAjC,CAAf;AACA,cAAIN,MAAMO,QAAN,CAAeF,IAAf,CAAJ,EAA0B;AACxBJ,mBAAOG,MAAP;AACD;;AAED,iBAAOU,MAAP;AACD;AAtBqB,OAAjB,CAAP;AAwBD;;;gCAEkBC,E,EAAI;AACrB,aAAO,QAAOA,EAAP,yCAAOA,EAAP,cAAoBC,QAApB,yCAAoBA,QAApB,EAAP,CADqB,CACgB;AACtC","file":"ProxyFactory.js","sourcesContent":["class ProxyFactory {\n  static create(model, props, action) {\n\n    return new Proxy(model, {\n\n      get(target, prop, reciever) {\n        \n        if (props.includes(prop) && ProxyFactory._isFunction(target[prop])) {\n          return function () {\n            //se for retorna uma nova function aplicando as traps\n            Reflect.apply(target[prop], target, arguments); //aplica a trap na função especifica, passando o arguments que contem todos os argumentos passados a função\n            return action(target);\n          };\n        }\n\n        return Reflect.get(target, prop, reciever); //se não for uma função só pega a propriedade\n      },\n\n      set(target, prop, value, reciever) {\n        const result = Reflect.set(target, prop, value, reciever);\n        if (props.includes(prop)) {\n          action(target);\n        }\n\n        return result;\n      },\n    });\n  }\n\n  static _isFunction(fn) {\n    return typeof fn == typeof Function; //verifica se é uma function\n  }\n}\n"]}